#Comment to trigger new pull request
#merge when ready
 common:
   godel-cache:
     key: &godel-cache-key v1-godel-cache-{{ checksum "godelw" }}-{{ checksum "godel/config/godel.yml" }}
     <<: &restore-godel-cache
       restore_cache:
         keys:
           - *godel-cache-key
     <<: &save-godel-cache
       save_cache:
         key: *godel-cache-key
         paths:
           - ~/.godel

   test-results:
     dir: &results-dir /tmp/test-results
     <<: &store-results
       store_test_results:
         path: *results-dir
     <<: &store-artifacts
       store_artifacts:
         path: *results-dir
         destination: test-results

# version: 2
 jobs:
   create-deployment:
     executor: aws-eks/python3
     parameters:
       cluster-name:
         description: |
           Name of the EKS cluster
         type: string
     steps:
       - checkout
       - aws-eks/update-kubeconfig-with-authenticator:
           cluster-name: << parameters.cluster-name >>
           install-kubectl: true
       - kubernetes/create-or-update-resource:
           get-rollout-status: true
           resource-file-path: tests/nginx-deployment/deployment.yaml
           resource-name: deployment/nginx-deployment

   test-cluster:
     executor: aws-eks/python3
     parameters:
       cluster-name:
         description: |
           Name of the EKS cluster
         type: string
     steps:
       - kubernetes/install
       - aws-eks/update-kubeconfig-with-authenticator:
           cluster-name: << parameters.cluster-name >>
       - run:
           command: |
             kubectl get services
           name: Test cluster

   build:
     working_directory: /go/src/github.com/palantir/bulldozer
     docker:
       - image: circleci/golang:1.13.4-stretch
     steps:
       - checkout
       - *restore-godel-cache
       - run: ./godelw version
       - *save-godel-cache
       - run: ./godelw build
       - persist_to_workspace:
           root: .
           paths:
             - build/bulldozer

   automated-tests:
     working_directory: /go/src/github.com/palantir/bulldozer
     environment:
        TESTS_DIR: *results-dir
     docker:
       - image: circleci/golang:1.13.4-stretch
     steps:
       - checkout
       - *restore-godel-cache
       - run: ./godelw version
       - *save-godel-cache
       - run: mkdir -p "${TESTS_DIR}"
       - run: ./godelw verify --apply=false --junit-output="$TESTS_DIR/$CIRCLE_PROJECT_REPONAME-tests.xml"
       - *store-results
       - *store-artifacts

   check-downtime:
     docker:
       - image: circleci/golang:1.13.4-stretch
     steps:
       - checkout
       - run: echo "Verifying that downtime is within the next windows limits"

   prepare-ffcommit:
     docker:
       - image: circleci/golang:1.13.4-stretch
     steps:
       - checkout
       - run: echo "Preparing Fast Forward Commit"

   create-deploy-branch:
     docker:
       - image: circleci/golang:1.13.4-stretch
     steps:
       - checkout
       - run:
          name: Create deployment branch with today's date
          command: |
            dt=$(date +%F)
            dp=deploy-$dt
            git branch $dp
            git branch production
            git checkout production
            git merge $dp

 orbs:
   aws-eks: circleci/aws-eks@1.0.0
   kubernetes: circleci/kubernetes@0.11.1
 version: 2.1

 workflows:
   version: 2
   build:
     jobs:
       - check-downtime:
           filters: { tags: { only: /.*/ } }
       - prepare-ffcommit:
           filters: { tags: { only: /.*/ } }
           requires:
            - check-downtime
       - build:
           filters: { tags: { only: /.*/ } }
           requires:
            - prepare-ffcommit
       - automated-tests:
           filters: { tags: { only: /.*/ } }
           requires:
            - build
#       - aws-eks/install-aws-iam-authenticator:
#           requires:
#             - automated-tests
       - aws-eks/create-cluster:
           aws-region: eu-west-1
           cluster-name: prod-clone
           requires:
             - automated-tests
       - create-deployment:
           cluster-name: eks-demo-deployment
           requires:
             - aws-eks/create-cluster
       - test-cluster:
           cluster-name: prod-clone
           requires:
             - aws-eks/create-cluster
       - aws-eks/delete-cluster:
           cluster-name: eks-demo-deployment
           requires:
             - test-cluster
       - create-deploy-branch:
           filters: { tags: { only: /.*/ } }
           requires:
            - aws-eks/delete-cluster
 #      - aws-eks/create-cluster:
 #          filters:
 #            branches:
 #              only:
 #                - production
 #          aws-profile: 
 #          aws-region: eu-west-1
 #          cluster-name: prod-clone
 #          requires:
 #            - create-deploy-branch

